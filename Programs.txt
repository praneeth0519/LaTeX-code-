/*8.Design and implement C/C++ Program to find a subset of a given set S = {sl , s2,.....,sn} of n positive integers whose sum is equal to a given positive integer d.*/
#include<stdio.h>
#define MAX 10
int s[MAX],x[MAX],d;
void sumofsub(int p,int k,int r)
{
    int i;
    x[k]=1;
    if((p+s[k])==d)
    {
        for(i=1; i<=k; i++)
            if(x[i]==1)
                printf("%d ",s[i]);
        printf("\n");
    }
    else if(p+s[k]+s[k+1]<=d)
        sumofsub(p+s[k],k+1,r
                 -s[k]);
    if((p+r
            -s[k]>=d) && (p+s[k+1]<=d))
    {
        x[k]=0;
        sumofsub(p,k+1,r
                 -s[k]);
    }
}
int main()
{
    int i,n,sum=0;
    printf("\nEnter the n value:");
    scanf("%d",&n);
    printf("\nEnter the set in increasing order:");
    for(i=1; i<=n; i++)
        scanf("%d",&s[i]);
    printf("\nEnter the max subset value:");
    scanf("%d",&d);
    for(i=1; i<=n; i++)
        sum=sum+s[i];
    if(sum<d || s[1]>d)
        printf("\nNo subset possible");
    else
        sumofsub(0,1,sum);
    return 0;
}


......

/*Design and implement C/C++ Program for N Queen's problem using Backtracking.*/
#include <stdio.h>
#define N 4

void printBoard(int board[N][N]) {
    for (int i = 0; i < N; i++, printf("\n"))
        for (int j = 0; j < N; j++)
            printf("%d ", board[i][j]);
}

int isSafe(int board[N][N], int row, int col) {
    for (int i = 0; i < col; i++)
        if (board[row][i]) return 0;
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j]) return 0;
    for (int i = row, j = col; i < N && j >= 0; i++, j--)
        if (board[i][j]) return 0;
    return 1;
}

int solveNQueens(int board[N][N], int col) {
    if (col >= N) return 1;
    for (int i = 0; i < N; i++) {
        if (isSafe(board, i, col)) {
            board[i][col] = 1;
            if (solveNQueens(board, col + 1)) return 1;
            board[i][col] = 0;
        }
    }
    return 0;
}

int main() {
    int board[N][N] = {0};
    if (solveNQueens(board, 0))
        printBoard(board);
    else
        printf("Solution does not exist\n");
    return 0;
}
....
/*7. Design and implement C/C++ Program to solve discrete Knapsack and continuous Knapsack problems using greedy approximation method*/


#include<stdio.h>
int main()
{
     float weight[50],profit[50],ratio[50],Totalvalue,temp,capacity,amount;
     int n,i,j;
     printf("Enter the number of items :");
     scanf("%d",&n);   
    for (i = 0; i < n; i++)
    {
        printf("Enter Weight and Profit for item[%d] :\n",i);
        scanf("%f %f", &weight[i], &profit[i]);
    } 
    printf("Enter the capacity of knapsack :\n");
    scanf("%f",&capacity);
     
     for(i=0;i<n;i++)
         ratio[i]=profit[i]/weight[i];
         
    for (i = 0; i < n; i++) 
      for (j = i + 1; j < n; j++) 
         if (ratio[i] < ratio[j]) 
        {
            temp = ratio[j];
            ratio[j] = ratio[i];
            ratio[i] = temp;
 
            temp = weight[j];
            weight[j] = weight[i];
            weight[i] = temp;
 
            temp = profit[j];
            profit[j] = profit[i];
            profit[i] = temp;
         }
    
     printf("Knapsack problems using Greedy Algorithm:\n");
     for (i = 0; i < n; i++) 
     {
      if (weight[i] > capacity)
          break;
       else 
      {
          Totalvalue = Totalvalue + profit[i];
          capacity = capacity - weight[i];
       }
     } 
       if (i < n)
       Totalvalue = Totalvalue + (ratio[i]*capacity);
     printf("\nThe maximum value is :%f\n",Totalvalue);     
     return 0;
}



......
#include<stdio.h>
#define INF 999
void dijkstra(int c[10][10],int n,int s,int d[10])
{
	int v[10],min,u,i,j;
	for(i=1;i<=n;i++)
	{
		d[i]=c[s][i];
		v[i]=0;
	}
	v[s]=1;
	for(i=1;i<=n;i++)
	{
		min=INF;
		for(j=1;j<=n;j++)
		if(v[j]==0 && d[j]<min)
		{
			min=d[j];
			u=j;
		}
		v[u]=1;
		for(j=1;j<=n;j++)
		if(v[j]==0 && (d[u]+c[u][j])<d[j])
		d[j]=d[u]+c[u][j];
	}
}

int main()
{
	int c[10][10],d[10],i,j,s,sum,n;
	printf("\nEnter n value:");
	scanf("%d",&n);
	printf("\nEnter the graph data:\n");
	for(i=1;i<=n;i++)
	for(j=1;j<=n;j++)
	scanf("%d",&c[i][j]);
	printf("\nEnter the souce node:");
	scanf("%d",&s);
	dijkstra(c,n,s,d);
	for(i=1;i<=n;i++)
	printf("\nShortest distance from %d to %d is %d",s,i,d[i]);
    return 0;
}

.....

/*5-Design and implement C/C++ Program to obtain the Topological ordering of vertices in a given digraph.*/
#include<stdio.h>
#include<conio.h>
void main()
{
	int a[10][10],t[10],indeg[10],n,SUM=0;
	int u,k=0,v;
	int i,j,stack[10],top=-1;
	printf("\n\n\t topological ordering \n\n");
	printf("enter the directed acyclic graph\n\n");
	printf("enter the no of vertex\t");
	scanf("%d",&n);
	printf("enter the adjacency matrix\n");
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			scanf("%d",&a[i][j]);
		}
	}
	for(i=0;i<n;i++)
		indeg[i]=0;
	for(j=0;j<n;j++)
	{
		SUM=0;
		for(i=0;i<n;i++)
		{
			SUM+=a[i][j];
		}
		indeg[j]=SUM;
	}
	for(i=0;i<n;i++)
	{
		if(indeg[i]==0)
		{
			stack[++top]=i;
		}
	}
	while(top!=-1)
	{
		u=stack[top--];
		t[k++]=u;
		for(v=0;v<n;v++)
		{
			if(a[u][v]==1)
			{
				indeg[v]--;
				if(indeg[v]==0)
				{
					stack[++top]=v;
				}
			}
		}
	}
	printf("the topological sorting list\n");
	for(i=0;i<n;i++)
	{
		printf("%d\t",t[i]+1);
	}
}

....




/*Design and implement C/C++ Program to solve 0/1 Knapsack problem using Dynamic Programming method.*/
#include<stdio.h>

int max(int a, int b) { return (a > b)? a : b; }

int knapSack(int W, int wt[], int p[], int n)
{
   int i, j;
   int V[n+1][W+1];

   for (i = 0; i <= n; i++)
   {
       for (j = 0; j <= W; j++)
       {
           if (i==0 || j==0)
               V[i][j] = 0;
           else if (wt[i] <= j)
                 V[i][j] = max( V[i-1][j],p[i] + V[i-1][j-wt[i]]);
           else
                 V[i][j] = V[i-1][j];
       }
   }

   return V[n][W];
}

int main()
{
    int i, n, p[20], wt[20], W;

    printf("Enter number of items:");
    scanf("%d", &n);

    printf("Enter value and weight of items:\n");
    for(i = 1;i <= n; ++i){
    	scanf("%d%d", &p[i], &wt[i]);
    }

    printf("Enter size of knapsack:");
    scanf("%d", &W);

    printf("Max Profit=%d", knapSack(W, wt, p, n));
    return 0;
}
